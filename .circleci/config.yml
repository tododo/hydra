# Orb 'ory/sdk@0.1.24' resolved to 'ory/sdk@0.1.24'
# Orb 'ory/changelog@0.0.6' resolved to 'ory/changelog@0.0.6'
# Orb 'ory/goreleaser@0.0.27' resolved to 'ory/goreleaser@0.0.27'
# Orb 'ory/nancy@0.0.8' resolved to 'ory/nancy@0.0.8'
# Orb 'ory/golangci@0.0.2' resolved to 'ory/golangci@0.0.2'
version: 2
jobs:
  test-e2e-plugin:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run:
          command: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run:
          command: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: ./test/e2e/circle-ci.bash plugin
      - run:
          command: ./test/e2e/circle-ci.bash plugin-jwt
  golangci/lint:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    steps:
      - checkout
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.2
      - run:
          command: golangci-lint run
  nancy/test:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    steps:
      - checkout
      - run:
          command: curl -L -o $GOPATH/bin/nancy https://github.com/sonatype-nexus-community/nancy/releases/download/v0.0.40/nancy-linux.amd64-v0.0.40 && chmod +x $GOPATH/bin/nancy
      - run:
          command: go list -m all | nancy -quiet
  goreleaser/test:
    docker:
      - image: oryd/xgoreleaser:1.13.7-0.126.0
        environment:
          - GO111MODULE=on
    working_directory: /home/ory
    steps:
      - checkout
      - run:
          command: go mod download
      - run:
          command: git diff --exit-code
      - run:
          command: goreleaser check
  sdk/generate:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    steps:
      - run:
          command: |
            download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \
              jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
            sudo curl -o $GOPATH/bin/swagger -L'#' "$download_url"
            sudo chmod +x $GOPATH/bin/swagger
      - run:
          command: go get github.com/sqs/goreturns@master github.com/ory/sdk/swagutil@master
      - checkout
      - run:
          command: |
            if [ "$(git show -s --format=%B | head -n 1)" = "chore: Regenerate swagger spec and internal client" ]; then
              circleci-agent step halt
            fi
      - run:
          command: swagger generate spec -m -o docs/api.swagger.json -x internal/httpclient
      - run:
          command: swagutil sanitize docs/api.swagger.json
      - run:
          command: swagger flatten --with-flatten=remove-unused -o ./docs/api.swagger.json ./docs/api.swagger.json
      - run:
          command: swagger validate docs/api.swagger.json
      - run:
          command: rm -rf internal/httpclient
      - run:
          command: mkdir -p internal/httpclient
      - run:
          command: swagger generate client -f docs/api.swagger.json -t internal/httpclient -A Ory_Hydra
      - run:
          command: git config --global user.email "aeneas@ory.sh"
      - run:
          command: git config --global user.name "aeneasr"
      - run:
          command: git add -A
      - run:
          command: |
            (git commit -m "chore: Regenerate swagger spec and internal client" -a && git push origin HEAD:$CIRCLE_BRANCH) || true
  changelog/generate:
    docker:
      - image: circleci/ruby:2.5-node
    steps:
      - checkout
      - run:
          command: |
            if [ "$(git show -s --format=%B | head -n 1)" = "docs: Regenerate and update changelog" ]; then
                circleci-agent step halt
            fi
      - run:
          command: gem install github_changelog_generator -v 1.15.0
      - run:
          command: sudo npm i -g doctoc
      - restore_cache:
          keys:
            - changelog-v1
      - run:
          command: github_changelog_generator -u $CIRCLE_PROJECT_USERNAME -p $CIRCLE_PROJECT_REPONAME -o CHANGELOG.md --token ${GITHUB_TOKEN} --cache-file /tmp/github_changelog_generator
      - save_cache:
          key: changelog-v1
          paths:
            - /tmp/github_changelog_generator
      - run:
          command: doctoc CHANGELOG.md
      - run:
          command: sed -i 's/\*\*Table of Contents.*/**Table of Contents**/' CHANGELOG.md
      - run:
          command: sed -i 's/\*This Change Log was.*/This Change Log was automatically generated/' CHANGELOG.md
      - run:
          command: git config --global user.email "aeneas@ory.sh"
      - run:
          command: git config --global user.name "aeneasr"
      - run:
          command: git add CHANGELOG.md
      - run:
          command: |
            git commit --allow-empty -m "docs: Regenerate and update changelog" -- CHANGELOG.md || true
      - run:
          command: git push origin HEAD:$CIRCLE_BRANCH || true
  test-e2e-postgres:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_POSTGRESQL=postgres://test:test@localhost:5432/hydra?sslmode=disable
      - image: postgres:9.6
        environment:
          - POSTGRES_USER=test
          - POSTGRES_PASSWORD=test
          - POSTGRES_DB=hydra
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run:
          command: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run:
          command: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: ./test/e2e/circle-ci.bash postgres
      - run:
          command: ./test/e2e/circle-ci.bash postgres-jwt
  goreleaser/release:
    docker:
      - image: oryd/xgoreleaser:1.13.7-0.126.0
        environment:
          - GO111MODULE=on
    working_directory: /home/ory
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_TOKEN}"
      - run:
          command: |
            curl -sL https://raw.githubusercontent.com/ory/ci/master/src/scripts/release_name.sh | bash > $BASH_ENV
            source $BASH_ENV
            GITHUB_TOKEN="${GITHUB_TOKEN}" goreleaser
  test-e2e-memory:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run:
          command: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run:
          command: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: ./test/e2e/circle-ci.bash memory
      - run:
          command: ./test/e2e/circle-ci.bash memory-jwt
  test-e2e-cockroach:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_COCKROACHDB=cockroach://root@localhost:26257/defaultdb?sslmode=disable
      - image: cockroachdb/cockroach:v2.1.6
        command: start --insecure
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run:
          command: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run:
          command: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: ./test/e2e/circle-ci.bash cockroach
      - run:
          command: ./test/e2e/circle-ci.bash cockroach-jwt
  benchmark:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - run:
          command: git config --global user.email "hi@ory.am"
      - run:
          command: git config --global user.name "ORY Continuous Integration"
      - run:
          command: go get -u github.com/rakyll/hey
      - run:
          command: go install .
      - run:
          command: ./scripts/run-bench.sh
      - run:
          command: ./scripts/run-configuration.sh
      - run:
          command: git clone https://arekkas:$DOCS_TOKEN_PUSH@github.com/ory/docs.git ../docs
      - run:
          command: cp BENCHMARKS.md ../docs/docs/performance/hydra.md
      - run:
          command: cp configuration.md ../docs/docs/hydra/configuration.md
      - run:
          command: (cd ../docs && git add -A && git commit -a -m "Updates ORY Hydra autogenerated docs" && git push origin) || exit 0
  sdk/release:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    steps:
      - checkout
      - run:
          command: |
            download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \
              jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
            sudo curl -o $GOPATH/bin/swagger -L'#' "$download_url"
            sudo chmod +x $GOPATH/bin/swagger
      - run:
          command: go get github.com/ory/sdk/swagutil@master
      - run:
          command: swagger generate spec -m -o docs/api.swagger.json -x internal/httpclient
      - run:
          command: swagutil sanitize docs/api.swagger.json
      - run:
          command: swagger flatten --with-flatten=remove-unused -o docs/api.swagger.json docs/api.swagger.json
      - run:
          command: swagger validate docs/api.swagger.json
      - run:
          command: git config --global user.email "aeneas@ory.sh"
      - run:
          command: git config --global user.name "aeneasr"
      - run:
          command: git clone git@github.com:ory/sdk.git ../sdk
      - run:
          command: |
            cp docs/api.swagger.json "../sdk/spec/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}.json"
            (cd ../sdk; git add -A; git commit -a -m "Add spec for ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}" || true; git push origin || true)
      - run:
          command: git clone git@github.com:ory/docs.git ../docs
      - run:
          command: |
            cp docs/api.swagger.json ../docs/apis/$CIRCLE_PROJECT_REPONAME.json
            (cd ../docs; git add -A; git commit -a -m "$CIRCLE_PROJECT_REPONAME: Update API Swagger definitions" || true; git push origin || true)
  test-e2e-mysql:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_MYSQL=mysql://root:test@(localhost:3306)/mysql?parseTime=true
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run:
          command: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run:
          command: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: ./test/e2e/circle-ci.bash mysql
      - run:
          command: ./test/e2e/circle-ci.bash mysql-jwt
  test:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_POSTGRESQL=postgres://test:test@localhost:5432/hydra?sslmode=disable
          - TEST_DATABASE_MYSQL=mysql://root:test@(localhost:3306)/mysql?parseTime=true
          - TEST_DATABASE_COCKROACHDB=cockroach://root@localhost:26257/defaultdb?sslmode=disable
      - image: postgres:9.6
        environment:
          - POSTGRES_USER=test
          - POSTGRES_PASSWORD=test
          - POSTGRES_DB=hydra
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
      - image: cockroachdb/cockroach:v2.1.6
        command: start --insecure
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: GO111MODULE=off go get github.com/mattn/goveralls github.com/ory/go-acc
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          command: go-acc -o coverage.txt ./... -- -failfast -timeout=20m
      - run:
          command: test -z "$CIRCLE_PR_NUMBER" && goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN || echo "forks are not allowed to push to coveralls"
workflows:
  bdt:
    jobs:
      - golangci/lint:
          filters:
            tags:
              only: /.*/
      - nancy/test
      - test:
          filters:
            tags:
              only: /.*/
          requires:
            - nancy/test
      - test-e2e-memory:
          filters:
            tags:
              only: /.*/
      - test-e2e-postgres:
          filters:
            tags:
              only: /.*/
      - test-e2e-mysql:
          filters:
            tags:
              only: /.*/
      - test-e2e-cockroach:
          filters:
            tags:
              only: /.*/
      - test-e2e-plugin:
          filters:
            tags:
              only: /.*/
      - benchmark:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - goreleaser/release
            - sdk/release
      - changelog/generate:
          filters:
            tags:
              only: /.*/
            branches:
              only: master
          requires:
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
      - sdk/generate:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /master/
          requires:
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
      - sdk/release:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test
            - golangci/lint
            - sdk/generate
            - goreleaser/release
      - goreleaser/test:
          filters:
            tags:
              only: /.*/
      - goreleaser/release:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - goreleaser/test
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
  version: 2
