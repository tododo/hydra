version: 2.1

orbs:
  sdk: ory/sdk@0.1.24
  changelog: ory/changelog@0.0.6
  goreleaser: ory/goreleaser@0.0.27
  nancy: ory/nancy@0.0.8
  golangci: ory/golangci@0.0.2

jobs:
  test:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_POSTGRESQL=postgres://test:test@localhost:5432/hydra?sslmode=disable
          - TEST_DATABASE_MYSQL=mysql://root:test@(localhost:3306)/mysql?parseTime=true
          - TEST_DATABASE_COCKROACHDB=cockroach://root@localhost:26257/defaultdb?sslmode=disable
      - image: postgres:9.6
        environment:
          - POSTGRES_USER=test
          - POSTGRES_PASSWORD=test
          - POSTGRES_DB=hydra
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
      - image: cockroachdb/cockroach:v2.1.6
        command: start --insecure
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - setup_remote_docker
      - run: GO111MODULE=off go get github.com/mattn/goveralls github.com/ory/go-acc
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run: go-acc -o coverage.txt ./... -- -failfast -timeout=20m
      #      Running race conditions requires parallel tests, otherwise it's worthless (which is the case)
      #      - run: go test -race -short $(go list ./... | grep -v cmd)
      - run: test -z "$CIRCLE_PR_NUMBER" && goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN || echo "forks are not allowed to push to coveralls"

  test-e2e-memory:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      # core node_modules cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache

      # oauth2_client node_modules cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules

      # go modules cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: ./test/e2e/circle-ci.bash memory
      - run: ./test/e2e/circle-ci.bash memory-jwt

  test-e2e-mysql:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_MYSQL=mysql://root:test@(localhost:3306)/mysql?parseTime=true
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      # core node_modules cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache

      # oauth2_client node_modules cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules

      # go modules cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: ./test/e2e/circle-ci.bash mysql
      - run: ./test/e2e/circle-ci.bash mysql-jwt

  test-e2e-postgres:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_POSTGRESQL=postgres://test:test@localhost:5432/hydra?sslmode=disable
      - image: postgres:9.6
        environment:
          - POSTGRES_USER=test
          - POSTGRES_PASSWORD=test
          - POSTGRES_DB=hydra
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      # core node_modules cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache

      # oauth2_client node_modules cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules

      # go modules cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: ./test/e2e/circle-ci.bash postgres
      - run: ./test/e2e/circle-ci.bash postgres-jwt

  test-e2e-cockroach:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
          - TEST_DATABASE_COCKROACHDB=cockroach://root@localhost:26257/defaultdb?sslmode=disable
      - image: cockroachdb/cockroach:v2.1.6
        command: start --insecure
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      # core node_modules cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache

      # oauth2_client node_modules cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules

      # go modules cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: ./test/e2e/circle-ci.bash cockroach
      - run: ./test/e2e/circle-ci.bash cockroach-jwt

  test-e2e-plugin:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      # core node_modules cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps
      - run: npm ci
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache

      # oauth2_client node_modules cache
      - restore_cache:
          keys:
            - v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
            - v1-deps
      - run: cd test/e2e/oauth2-client; npm ci
      - save_cache:
          key: v1-deps-oauth2-client-{{ checksum "test/e2e/oauth2-client/package-lock.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.npm
            - ~/.cache
            - /test/e2e/oauth2-client/node_modules

      # go modules cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go install .
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: ./test/e2e/circle-ci.bash plugin
      - run: ./test/e2e/circle-ci.bash plugin-jwt

  benchmark:
    docker:
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - run: git config --global user.email "hi@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: go get -u github.com/rakyll/hey
      - run: go install .
      - run: ./scripts/run-bench.sh
      - run: ./scripts/run-configuration.sh
      - run: "git clone https://arekkas:$DOCS_TOKEN_PUSH@github.com/ory/docs.git ../docs"
      - run: "cp BENCHMARKS.md ../docs/docs/performance/hydra.md"
      - run: "cp configuration.md ../docs/docs/hydra/configuration.md"
      - run: "(cd ../docs && git add -A && git commit -a -m \"Updates ORY Hydra autogenerated docs\" && git push origin) || exit 0"

workflows:
  bdt:
    jobs:
      - golangci/lint:
          filters:
            tags:
              only: /.*/
      - nancy/test:
        filters:
          tags:
            only: /.*/
      - test:
          requires:
            - nancy/test
          filters:
            tags:
              only: /.*/
      - test-e2e-memory:
          filters:
            tags:
              only: /.*/
      - test-e2e-postgres:
          filters:
            tags:
              only: /.*/
      - test-e2e-mysql:
          filters:
            tags:
              only: /.*/
      - test-e2e-cockroach:
          filters:
            tags:
              only: /.*/
      - test-e2e-plugin:
          filters:
            tags:
              only: /.*/
      - benchmark:
          # Avoids race conditions when pushing
          requires:
            - goreleaser/release
            - sdk/release
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - changelog/generate:
          requires:
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - sdk/generate:
          appname: Ory_Hydra
          requires:
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /master/
      - sdk/release:
          requires:
            - test
            - golangci/lint
            - sdk/generate
            - goreleaser/release
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - goreleaser/test:
          filters:
            tags:
              only: /.*/
      - goreleaser/release:
          requires:
            - goreleaser/test
            - test
            - golangci/lint
            - test-e2e-memory
            - test-e2e-postgres
            - test-e2e-mysql
            - test-e2e-cockroach
            - test-e2e-plugin
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
